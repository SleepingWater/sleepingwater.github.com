--HTML时间处理程序
两个缺点：
1、存在一个时差问题，为此，很多HTML事件处理程序都会被封装在一个try-catch块中，以便错误不会浮出水面
<input type="button" value="Click me" onclick="try{showMessage();}catch(ex){}">
2、这样扩展处理程序的作用域链在不同浏览器中会导致不同结果。

--DOM0级事件处理程序
通过javascript指定时间处理程序的传统方式，就是将一个函数赋值给一个时间处理程序属性。
每个元素都有自己的时间处理程序属性。
var btn=document.getElementById("myBtn");
btn.onclick=function(){
	alert("Clicked");
};

btn.onclick=null;	//删除事件处理程序

--DOM2级事件处理程序
“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()和removeEventListener()。所有DOM节点中都包含这两个方法，并且它们都接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。
btn.addEventListener("click",function(){
	alert(this.id);
},false);
通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数将无法移除。

--IE事件处理程序
attachEvent()和deachEvent()

--跨浏览器的事件处理程序
var EventUtil={
	addHandler:function(element,type,handler){
		if(element.addEventListener){
			element.addEventListener(type,handler,false);
		}else if(element.attachEvent){
			element.attachEvent("on"+type,handler);
		}else{
			element["on"+type]=handler;
		}
	},
	removeHandler:function(element,type,handler){
		if(element.removeEventListener){
			element.removeEventListener(type,handler,false);
		}else if(element.detachEvent){
			element.detachEvent("on"+type,handler);
		}else{
			element["on"+type]=null;
		}
	}
};