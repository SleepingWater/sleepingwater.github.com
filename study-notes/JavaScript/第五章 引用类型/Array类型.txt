创建数组的基本方法有两种
1、var colors=new Array(3);	//在使用Array构造函数时new可以省略
2、数组字面量表示法		//和创建对象一个，在使用数组字面量表示法时，也不会调用Array构造函数
var colors=["red","yellow","blue"];
var names=[];

数组的length属性，不仅是只读。可以通过设置这个属性，从数组的末尾移除项或向数组中添加新项

-检测数组	//不使用instanceof
if(Array.isArray(value)){	//判断value是否为数组
	...
}

-转换方法
colors.toString()	//返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串
colors.valueOf()	//返回数组，数组的每一项都调用了toString()方法
另外toLocaleString()方法经常也会返回与toString()和valueOf()方法相同的值。toLocaleString()和toString()类似，调用每项的toLocaleString()方法
colors.join("||");	//输出为red||yellow||blue

-栈方法
push()方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度
pop()方法从数组末尾移除最后一项，减少数组的length值，然后返回移除的项

-队列方法
push()
shift()方法移除数组中的第一个项并返回该项，同时数组长度减1
unshift()在数组前端添加任意个项并返回新数组的长度

-重排序方法
reverse()	颠倒数组中元素的顺序
sort()		升序排列数组项
注：sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，即时数组中每一项都是数值，sort()方法比较的也是字符串
var values=[0,1,5,10,15];
values.sort();	//0,1,10,15,5
因此sort()接受一个比较函数作为参数
function compare(value1,value2){
	if(value1<value2){
	return -1;
	}else if(value1>value2){
	return 1;
	}else{
	return 0;
	}
}
values.sort(compare);	//0,1,5,10,15

-操作方法
concat()方法可以基于当前数组中的所有项创建一个新数组	var colors2=colors.concat("yellow",["black","brown"]);
slice()方法可以基于当前数组中的一或多个项创建一个新数组		var colors3=colors.slice(1,4);	//下标为1至4的项
splice()
*删除：指定两个参数，要删除的第一项的位置和要删除的项数
例：splice(0,2)会删除数组中的前两项
*插入/替换：提供三个参数：起始位置，要删除的项数和要插入的项
例：splice(2,0,"red","green")在当前数组位置2开始插入字符串"red"和"green"
	splice(2,1,"red","green")在删除当前数组位置2的项，然后再从位置2开始插入字符串"red"和"green"

-位置方法
indexOf()和lastIndexOf()都接受两个参数：要查找的项和（可选）表示查找起点位置的索引。都返回要查找的项在数组中的位置，在没有找到的情况下返回-1（比较时使用全等操作符）

-迭代方法		//对数组中的每一项运行给定函数
every():如果每一项都返回true，则返回true
filter():返回改函数会返回true的项组成的函数
foreach():没有返回值
map():返回每次函数调用的结果组成的数组
some():如果该函数对任一项返回true，则返回true
var numbers=[1,2,3,4,5,4,3,2,1];
var filterResult=numbers.filter(function(item,index,array){
	return (item>2);
});

-归并方法
传给reduce()和reduceRight()的函数接受4个参数：前一个值，当前值、项的索引和数组对象。
var values=[1,2,3,4,5];
var sum=values.reduce(function(prev,cur,index,array){
	return prev+cur;
});
alert(num);	//15
reduce()从数组的第一项开始，遍历到最后。
reduceRight()从数组的最后一项开始，向前遍历到第一项。