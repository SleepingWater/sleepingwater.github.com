虽然Object构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点；使用同一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。

--工厂模式
function createPerson(name,age,job){
	var o= new Object();
	o.name=name;
	o.age=age;
	o.job=job;
	o.sayName=function(){
		alert(this.name);
	};
	return o;
}
var person1=createPerson("LiLei",18,"coder");
var person2=createPerson("HanMeimei",18,"teacher");
工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）

--构造函数模式
function Person(name,age,job){
	this.name=name;
	this.age=age;
	this.job=job;
	this.sayName=function(){
		alert(this.name);
	};
}
var person1=new Person("LiLei",18,"coder");
var person2=new Person("HanMeimei",18,"teacher");
和工厂模式不同之处：
1、没有显示地创建对象
2、直接将属性和方法赋给了this对象
3、没有return
4、函数名大写（按照惯例，构造函数始终都应该以一个小写字母开头，而非构造函数则应该以一个小写字母开头）
alert(person1 instanceof Object);	//true
alert(person1 instanceof Person);	//true

使用构造函数的主要问题，就是每个方法都要在每个实例上重新创建一遍。说明白些，以这种方法创建函数，会导致不同的作用域链和标识符解析，但创建Function新实例的机制仍然是相同的。
alert(person1.sayName==person2.sayName);	//false

--原型模式！！！
function Person(){

}
Person.prototype.name="SuiYu";
Person.prototype.age="16";
Person.prototype.job="coder";
Person.prototype.sayName=function(){
	alert(this.name);
}
var pserson1=new Person();
person1.sayName();	//SuiYu
var person2=new Person();
person2.sayName();	//SuiYu
alert(person1.sayName==person2.sayName);	//true

1、理解原型对象 p148*
2、原型与in操作符
单独使用：
alert("name" in person1);	//true
person1.name="suiyu";
alert("name" in person1);	//true
alert(person1.hasOwnProperty("name"));	//true
delete person1.name;
alert("name" in person1);	//true
alert(person1.hasOwnProperty("name"));	//false
因此只要in操作符返回true而hasOwnProperty()返回false，就可以确定属性是原型中的属性
function hasPrototypeProperty(object,name){
	return !object.hasOwnProperty(name)&&(name in object);
}
循环使用（for in）：
在使用for-in循环时，返回的是所有能够通过对象访问的，可枚举的属性，其中既包括存在于实例中的属性，也包括存在于原型中的属性。
要取得对象上所有可枚举的实例属性，可使用Object.keys()方法。
var keys=Object.keys(Person.prototype);
alert(keys);	//"name,age,job,sayName"
3、更简单的原型语法
对象字面量
function Person();
Person.prototype={
	name:"SuiYu",
	age:29,
	job:"coder",
	sayName:function(){
		alert(this.name);
	}
};
4、原型的动态性
实例与原型之间的连接是一个指针，可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例中反映出来
如果是重写整个原型对象，则会报错
5、原生对象的原型
6、原型对象的问题
包含引用类型值的属性
person1.friends.push("SY");
alert(person1.friends===person2.friends);	//true

--组合使用构造函数模式和原型模式
创建自定义类型的最常见的方式，就是组合使用构造函数模式与原型模式。
*构造函数模式用于定义实例属性，而原型模式定义方法和共享的属性。

function Person(name,age,job){
	this.name=name;
	this.age=age;
	this.job=job;
	this.friends=["Lily","Lucas"];
}
Person.prototype={
	constructor:Person;
	sayName:function(){
		slert(this.name);
	}
}

--寄生构造函数模式
创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象
例子：创建一个具有额外方法的特殊数组，由于不能直接修改Array构造函数，因此可以使用这个模式