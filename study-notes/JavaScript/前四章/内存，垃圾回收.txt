--基本数据值在内存中占据固定大小的空间，因此被保存在栈内存中；
--从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；
--引用类型的值时对象，保存在堆内存中；
--确定一个值为哪种基本类型可以用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符；

--执行环境有全局执行环境和函数执行环境之分；
--每次进入一个新执行环境，都会创建一个用户搜索变量和函数的作用域链；
--变量的执行环境有助于确定应该何时释放内存；

JavaScript具有自动垃圾回收机制
--离开作用域的值将被自动标记为可回收；
--“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存；
--另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数，JavaScript引擎目前都不再使用这种算法；
--解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处；