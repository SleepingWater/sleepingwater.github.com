散列是一种常用的数据存储技术， 散列后的数据可以快速地插入或取用。 散列使用的数据结构叫做散列表。 在散列表上插入、 删除和取用数据都非常快， 但是对于查找操作来说却效率低下， 比如查找一组数据中的最大值和最小值。 这些操作得求助于其他数据结构， 二叉查找树就是一个很好的选择。 本章将介绍如何实现散列表， 并且了解什么时候应该用散列表存取数据。

1、散列概览
理想情况下， 散列函数会将每个键值映射为一个唯一的数组索引。 然而， 键的数量是无限的， 数组的长度是有限的（ 理论上， 在 JavaScript 中是这样）， 一个更现实的目标是让散列函数尽量将键均匀地映射到数组中。
即使使用一个高效的散列函数， 仍然存在将两个键映射成同一个值的可能， 这种现象称为碰撞（ collision）， 当碰撞发生时， 我们需要有方案去解决。 本章稍后部分将详细讨论如何解决碰撞。
要确定的最后一个问题是： 散列表中的数组究竟应该有多大？ 这是编写散列函数时必须要考虑的。 对数组大小常见的限制是： 数组长度应该是一个质数。

2、HashTable类
function HashTable(){
	this.table = new Array(137);
	this.simpleHash = simpleHash;
	this.showDistro = showDistro;
	this.put = put;
	//this.get = get;
}
(1)选择一个散列函数
如果键是整型，最简单的散列函数就是以数组的长度对键取余。
如果键是字符串，将字符串的每个字符的ASCII码值相加似乎是一个不错的散列函数（会出现碰撞，不同值的散列值一样）
function simpleHaah(data){
	var total = 0;
	for(var i=0;i<data.length;i++){
		total += data.charCodeAt(data[i]);
	}
	return total % this.table.length;
}
function put(data){
	var pos = simpleHash(data);
	this.table[pos] = data;
}
function showDistro(){
	var n = 0;
	for(var i=0;i<this.table.lenth;i++){
		if(this.table[i] != undefined){
			print(i+":"+this.table[i]);
		}
	}
}
(2)一个更好的散列函数
霍纳算法
在此算法中， 新的散列函数仍然先计算字符串中各字符的 ASCII 码值， 不过求和时每次要乘以一个质数。大多数算法书建议使用一个较小的质数， 比如 31， 但是对于我们的数据集， 31 不起作用，我们使用 37， 这样刚好不会产生碰撞。
function betterHash(data){
	const H = 37;
	var total = 0;
	for(var i=0;i<data.length;i++){
		total = H * total + data.charCodeAt(data[i]);
	}
	total = total % arr.length;
	return parseInt(total);
}
(3)散列化整型键
(4)对散列表排序、从散列表中取值

3、碰撞处理（开链法和线性探测法）
(1)开链法
实现开链法的方法是： 在创建存储散列过的键值的数组时， 通过调用一个函数创建一个新的空数组， 然后将该数组赋给散列表里的每个数组元素。 这样就创建了一个二维数组。
function put(key, data) {
	var pos = this.betterHash(key);
	var index = 0;
	if (this.table[pos][index] == undefined) {
		this.table[pos][index+1] = data;
	}else {
		++index;
		while (this.table[pos][index] != undefined) {
			++index;
		}
		this.table[pos][index+1] = data;
	}
}
(2)线性探测法
第二种处理碰撞的方法是线性探测法。 线性探测法隶属于一种更一般化的散列技术： 开放寻址散列。 当发生碰撞时， 线性探测法检查散列表中的下一个位置是否为空。 如果为空，就将数据存入该位置； 如果不为空， 则继续检查下一个位置， 直到找到一个空的位置为止。 该技术是基于这样一个事实： 每个散列表都会有很多空的单元格， 可以使用它们来存储数据。
当存储数据使用的数组特别大时， 选择线性探测法要比开链法好。 这里有一个公式， 常常可以帮助我们选择使用哪种碰撞解决办法： 如果数组的大小是待存储数据个数的 1.5 倍，那么使用开链法； 如果数组的大小是待存储数据的两倍及两倍以上时， 那么使用线性探测法。