1、数组测试平台（辅助完成基本的排序算法）
function CArray(numElements){
	this.dataStore = [];
	this.pos = 0;
	this.numElements = numElements;
	this.insert = insert;
	this.toString = toString;
	this.clear = clear;
	this.setData = setData;
	this.swap = swap;
	for(var i=0;i<numElements;i++){
		this.dataStore[i] = i;
	}
}
function setData(){
	for(var i=0;i<numElents;i++){
		this.dataStore[i] = Math.floor(Math.random() * (this.numElements + 1));
	}
}
function clear(){
	for(var i=0;i<this.dataStore.length;i++){
		this.dataStore[i] = 0;
	}
}
function insert(element){
	this.dataStore[this.pos++] = element;
}
function toString(){
	var resStr = "";
	for(var i=0;i<this.dataStore.length;i++){
		res += this.dataStore[i] + "";
		if(i > 0 && i % 10 == 0){
			resStr += "\n";
		}
	}
}
function swap(arr,index1,index2){
	var tmp = arr[index1];
	arr[index1] = arr[index2];
	arr[index2] = tmp;
}

2、冒泡排序法
function bubbleSort(){
	var numElements = this.dataStore.length;
	for(var outer = numElements;outer >= 2;outer--){
		for(var inner = 0;inner <= outer-1;inner++){
			if(this.dataStore[inner] > this.dataStore[inner + 1]){
				swap(this.dataStore, inner, inner + 1);
			}
		}
	}
}

3、选择排序法
function selectionSort(){
	var min;
	for(var outer=0;outer<this.dataStore.length-1;outer++){
		min = outer;
		for(var inner=outer+1;inner<this.dataStore.length;inner++){
			if(this.dataStore[inner]<this.dataStore[min]){
				min = inner;
			}
		}
		swap(this.dataStore,outer,min);
	}
}

4、插入排序
插入排序类似于人类按数字或字母顺序对数据进行排序。 例如， 让班里的每个学生上交一张写有他的名字、 学生证号以及个人简介的索引卡片。 学生交上来的卡片是没有顺序的，但是我想让这些卡片按字母顺序排好， 这样就可以很容易地与班级花名册进行对照了。我将卡片带回办公室， 清理好书桌， 然后拿起第一张卡片。 卡片上的姓氏是 Smith。 我把它放到桌子的左上角， 然后再拿起第二张卡片。 这张卡片上的姓氏是 Brown。 我把 Smith移右， 把 Brown 放到 Smith 的前面。 下一张卡片是 Williams， 可以把它放到桌面最右边，而不用移动其他任何卡片。 下一张卡片是 Acklin。 这张卡片必须放在这些卡片的最前面，因此其他所有卡片必须向右移动一个位置来为 Acklin 这张卡片腾出位置。 这就是插入排序的排序原理。
插入排序有两个循环。 外循环将数组元素挨个移动， 而内循环则对外循环中选中的元素及它后面的那个元素进行比较。 如果外循环中选中的元素比内循环中选中的元素小， 那么数组元素会向右移动， 为内循环中的这个元素腾出位置， 就像之前介绍的姓氏卡片一样。
function insertionSort() {
	var temp, inner;
	for (var outer = 1; outer <= this.dataStore.length - 1; ++outer) {
		temp = this.dataStore[outer];
		inner = outer;
		while (inner > 0 && (this.dataStore[inner - 1] >= temp)) {
			this.dataStore[inner] = this.dataStore[inner - 1];
			--inner;
		}
			this.dataStore[inner] = temp;
	}
}

5、排序效率比较
选择排序和插入排序要比冒泡排序快， 插入排序是这三种算法中最快的。