javascript中的数组是一种特殊的对象，用来表示偏移量的索引是该对象的属性，索引可能是整数，然后这些数字索引在内部被转换为字符串类型，因为javascript对象中的属性名必须是字符串。
在效率上不如其他语言中的数组高。

1、创建数组
arr = [];//推荐方式，效率高
arr = new Array();
arr = new Array(5);
arr = [1,2,3];

2、对数组的整体操作
当把一个数组赋给另一个数组时，只是为被赋值的数组增加了一个新的引用。
var arr2 = arr1;
arr1[0] = 500;
console.log(arr2[0]);//显示500
这种行为被称为浅复制，新数组依然指向原来的数组。
一种更好的方案是使用深复制，将原数组中的每一个元素都复制一份到新数组中。
for(var i=0;i<arr1.length;++i){
	arr2[i] = arr1[i];
}

3、存取函数
indexOf() 返回该元素在数组中的索引，如果不包含，返回-1。

4、数组转换为字符串
var names = ["zhou","chen","lin"];
var namestr = names.join();//sui,chen,lin
等价于var namestr = names.toString();

5、由已有的数组创建新的数组
concat()合并多个数组。
splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。

6、为数组添加/删除元素
push() 方法会将一个元素添加到数组末尾。
unshift() 方法可以将元素添加在数组的开头。

pop() 方法可以删除数组末尾的元素。
shift() 方法可以删除数组的第一个元素。

7、迭代器方法  迭代器是一种检查容器内元素并遍历元素的数据类型
对数组中的每个元素应用一个函数

forEach();该方法接受一个函数作为参数
nums.forEach(square);

every();该方法接受一个返回值为布尔类型的函数，全部满足返回true
function isEven(num){
	return num % 2 == 0;
}
nums.every(isEven);

some();类似于every(),只要有一个满足返回true;

reduce()；方法接受一个函数， 返回一个值。

生成新数组的迭代器方法：
map()
map()和forEach()有点儿像，对数组中的每个元素使用某个函数。 两者的区别是map()返回一个新的数组， 该数组的元素是对原有元素应用某个函数得到的结果
filter()
filter()和every()类似， 传入一个返回值为布尔类型的函数。 和 every() 方法不同的是，当对数组中的所有元素应用该函数， 结果均为 true 时， 该方法并不返回 true， 而是返回一个新数组， 该数组包含应用该函数后结果为 true 的元素。

2.8、对象中的数组