TCP是一种传输层协议，它可以让你将数据从一台计算机完整有序地传输到另一台计算机

1、TCP有哪些特性
a.面向连接的通信和保证顺序的传递
b.面向字节
c.可靠性（确认消息）
d.流控制，确保两点之间传输数据的平衡
e.拥堵控制，通过控制数据包的传输速率避免拥堵

2、Telent
a.成功建立一个TCP连接
b.创建一个HTTP请求
c.接受一个HTTP请求
d.测试了一些TCP的特性。到达的数据和在Node.js中写的一样，所有的信息都按序到达。

3、基于TCP的聊天程序
/*模块依赖*/
var net = require('net')
	,count=0
	,users={};
/*创建服务器*/
var server = net.createServer(function (conn) {
	var nickname;
	conn.setEncoding('utf8');
	conn.write(
		'\n > wlecome to \033[92mnode-chat\033[39m!'+'\n > ' + count + ' other people are conneted at this time.'+'\n > please write your name and press Enter:'
	);
	count++;

	//当客户端请求关闭时，计数器递减比并清除用户
	conn.on('close',function () {
		count--;
		delete users[nickname];
	});

	//处理客户端发来的数据
	conn.on('data',function (data) {
		data = data.replace('\r\n','');
		if(!nickname){
			if(users[data]){
				conn.write('\033[93m> nickname already in use.try again:\033[39m');
				return;
			}else{
				nickname = data;
				users[nickname] = conn;

				for(var i in users){
					if(i != nickname){
						//users[i].write('\033[90m > ' + nickname + ':\033[39m\n' + data +'\n')
						users[i].write('\033[90m > ' + nickname + ' joined the room\033[39m\n')
					}
				}
			}
		}else{
			for(var i in users){
				if(i != nickname){
					users[i].write('\033[90m > ' + nickname + ':\033[39m' + data +'\n')
				}
			}
		}
		//console.log(data);
	});
});
/*监听*/
server.listen(3000,function () {
	console.log('\033[96m	server listening on *:3000\033[39m');
});

4、一个IRC（英特网中继聊天 Internet Relay Chat）客户端程序