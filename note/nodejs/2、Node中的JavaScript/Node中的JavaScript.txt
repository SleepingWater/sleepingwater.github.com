1、global对象
在浏览器中，全局对象指的是window
Node中有两个类似但各自代表着不同含义的对象
gloabl：和window一样，任何global对象上的属性都可以被全局访问到
process：所有全局执行上下文的内容都在process对象中。
process.nextTick函数可以将一个函数的执行时间规划到下一个时间循环中
console.log(1);
process.nextTick(function(){
	console.log(3);
});
console.log(2);
输出结果为1,2,3

2、模块系统
模块系统有三个核心的全局对象：require，module，exports

绝对和相对模块
绝对模块是指Node通过在其内部node_modules查找到的模块，或者Node内置的如fs这样的模块
相对模块将require指向一个相对工作目录的JavaScript文件

3、事件
Node.js中的基础API之一就是EventEmitter
var EventEmitter = require('events').EventEmitter
	,a = new EventEmitter;
a.on('event',function(){
	console.log('event called');
});
a.emit('event');

以HTTP服务器为例。当请求到达时，Node会调用一个回调函数，这个时候数据可能不会一下子都到达。POST请求（用户提交一个表单）就是这样的例子
http.Server(function(req,res){
	var buf = '';
	req.on('data',function(data){
		buf += data;
	});
	req.on('end',function(){
		console.log('数据接收完毕！');
	});
});
将请求数据内容进行缓冲（data事件），等所有数据都接受完毕（end事件）再对数据进行处理。

不管某个事件在将来会被触发多少次，我都希望只调用一次毁掉函数
a.once('某个事件',function(){
	//尽管事件会多次触发，但此方法只会执行一次
})

